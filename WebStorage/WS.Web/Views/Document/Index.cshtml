@using WS.Business.ViewModels
@model IEnumerable<DocumentViewModel>


<style>
    #file-options {
        background-color: white;
        font-size:15px;
    }

    .dropzone-container {
        width: 90%;
        margin-left: 15px;
        margin-right: 5px;
    }

    .dropzone-drop-area {
        background-color: white;
        width: 100%;
        min-height: 350px;
        box-sizing: border-box;
        padding: 2px;
        /*display: flex;*/
        flex-direction: row;
        align-items: center;
        justify-content: flex-start;
        flex-wrap: wrap;
        cursor: pointer;
        position: relative;
        overflow-y:auto;
        max-height:820px;
    }

    .dropzone-drop-area.over {
        background-color: white;
        border: dashed 2px silver;
    }
    tr.selected {
        background-color: #99CCFF;
    }
    #snackbar {
        visibility: hidden;
        min-width: 250px;
        margin-left: -125px;
        background-color: #333;
        color: #fff;
        text-align: center;
        border-radius: 2px;
        padding: 16px;
        position: fixed;
        z-index: 1;
        left: 50%;
        bottom: 30px;
        font-size: 17px;
        max-height:200px;
    }

        #snackbar.show {
            visibility: visible;
            -webkit-animation: fadein 0.5s, fadeout 0.5s 2.5s;
            animation: fadein 0.5s, fadeout 0.5s 2.5s;
        }
</style>
@Html.Hidden("fullpath", "")
@Html.Hidden("parentId", "")
<script>
    GetParentId();
    function handleDragOver(e) {
        if (e.preventDefault) {
            e.preventDefault(); // Necessary. Allows us to drop.
        }
        e.dataTransfer.dropEffect = 'move';  // See the section on the DataTransfer object.

        return false;
    }
    function handleDragEnter(e) {
        // this / e.target is the current hover target.
        this.classList.add('over');
    }

    function handleDragLeave(e) {
        this.classList.remove('over');  // this / e.target is previous target element.
    }
    $(document).ready(function () {
        var zone = document.querySelector('.dropzone-drop-area');
        var row = $('.filerow');
        zone.addEventListener('dragenter', handleDragEnter, false);
        zone.addEventListener('dragover', handleDragOver, false);
        zone.addEventListener('dragleave', handleDragLeave, false);
        //row.addEventListener('dragenter', handleDragEnter, false);
        //row.addEventListener('dragover', handleDragOver, false);
        //row.addEventListener('dragleave', handleDragLeave, false);
        $('#renameModal').modal({ show: false });
        $('#myModal').modal({ show: false });
        $('#createModal').modal({ show: false });
        $('#viewErrorModal').modal({ show: false });   
        $('#backParentId').hide();
        $('#dropzone-drop-area').load('@Url.Action("ReturnDocumentList", "Document", new {parentId=ViewBag.ParentId })');
        $('#menuButton').on('click', function (e) {
            e.preventDefault();
            //$('.filerow').contextMenu();
            $('.filerow').trigger("contextmenu");
            // or $('.context-menu-one').contextMenu({x: 100, y: 100});
        });
    });
    $.contextMenu({
        selector: '.filerow',
        callback: function (key, options) {
            ContextResult(key, $(this).attr("id"))
        },
        items: {
            "download": { name: "Download"},
            "share": { name: "Share", icon:"fa fa-share"},
            "view": { name: "View", icon: "edit"},
            "rename": { name: "Rename"},
            "cut": { name: "Cut", icon: "cut"},
            "copy": { name: "Copy", icon: "copy"},
            "paste": {
                name: "Paste", icon: "paste", disabled: function () {
                    if (sessionStorage.getItem("copy") == "" || sessionStorage.getItem("copy") == undefined) {
                        return true;
                    }
                    else {
                        return false;
                    }
                }
            },
            "delete": { name: "Delete", icon: "delete" },
            "sep1": "---------",
            "quit": { name: "Quit", icon: function ($element, key, item) { return 'context-menu-icon context-menu-icon-quit'; } }
        }
    });
    Dropzone.options.uploader = {
        paramName: "file", // The name that will be used to transfer the file
        clickable: true,
        uploadMultiple: false,
        parallelUploads: 1,
        previewsContainer: ".dropzone-previews",
        autoProcessQueue: true,
        init: function () {
            var _thiss = this;
            // Setup the observer for the button.
            $("#cencel-downloading").on("click", function () {
                // Using "_this" here, because "this" doesn't point to the dropzone anymore
                _thiss.removeAllFiles(true);
            });
            this.on("sending", function (file, xhr, data) {
                if (file.fullPath) {
                    data.append("fullPath", file.fullPath);
                }
                data.append("parentId", GetParentId());
            });
            this.on("drop", function () {
                $("#download-processing-modal").show();
            });
            this.on("addedfile", function () {
                window.ProcessingItems = window.ProcessingItems + 1;
            });
            this.on("processing", function (file) {
                $("#current-downloading-item").html(file.name);
                window.currentProcessingItem = window.currentProcessingItem + 1;
                $("#download-processing-current").html(window.currentProcessingItem);
                $("#download-processing-entire").html(window.ProcessingItems);
            });
            this.on("queuecomplete", function () {
                $("#download-processing-modal").hide();
                window.currentProcessingItem = 0;
                window.ProcessingItems = 0;
            });
            this.on("dropfile", function (file, xhr, data) {
                if (file.fullPath) {
                    data.append("fullPath", file.fullPath);
                }
                data.append("parentId", GetParentId());
            });
            this.on("queuecomplete", function (file) {
                var x = document.getElementById("snackbar");
                x.className = x.className.replace("show", ""); 
                $('#dropzone-drop-area').load('@Url.Action("ReturnDocumentList", "Document")');
            });
        }
    };
</script>
<div class="row form-control-static">
    <div class="col-md-11">
        <div class="row">
            <button id="backParentId" class="btn btn-secondary" onclick="GoBack()">Назад</button>
            <form class="navbar-form navbar-left" action="/search/find" method="post">
                <div class="input-group">
                    <input type="text" name="pattern" id="pattern" class="form-control" oninput="SearchTop();" onfocus="SearchTop();" onblur="HideResults();" autocomplete="off" placeholder="Search">
                    <span class="input-group-btn">
                        <button type="submit" class="btn btn-default"><span class="glyphicon glyphicon-search"></span></button>
                    </span>
                </div>
                <div class="result"></div>
            </form>
        </div>
        <div class="dropzone-container" id="dropzone">
            <form action="/Document/UploadFiles" id="uploader" class="dropzone">
                <div id="dropzone-drop-area" class="dropzone-drop-area">
                </div>
                <div id="dropzone-message-area" class="dz-message">
                </div>
            </form>
        </div>
    </div>
    <div class="col-md-1">
        <div class="btn-group-vertical">
            <input type="submit" class="btn btn-primary" id="uploadFilesButton" onclick="ChooseFiles()" value="Upload" />
            <br />
            <input type="submit" class="btn btn-primary" id="createfolderButton" onclick="CreateFolder()" value="Create folder" />
        </div>
    </div>
    @*<div class="col-md-2">
            <div id="file-options">
            </div>
        </div>*@
</div>
<div id="snackbar" class="dropzone-previews">
  
</div>
@{
    Html.RenderPartial("_Rename", new DocumentView());
    Html.RenderPartial("_FileViewErrorResult", new DocumentView());
    Html.RenderPartial("_CreateFolder", new DocumentView());
    @Html.Partial("../Share/_SharingModal.cshtml", new DocumentView());
}

<div id="download-processing-modal">
    <div id="download-processing-header">

        <div id="download-processing-name">
            <button id="cencel-downloading">&times;</button> Downloading 
            <span id="current-downloading-item"></span>
        </div>
    </div>
    <div id="download-processing-number">Processing <span id="download-processing-current"></span> from <span id="download-processing-entire"></span></div>
</div>